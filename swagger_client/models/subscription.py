# coding: utf-8

"""
    ngsi-v2

    NGSI V2 API RC-2018.04  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.subscription_notification import SubscriptionNotification  # noqa: F401,E501
from swagger_client.models.subscription_subject import SubscriptionSubject  # noqa: F401,E501


class Subscription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'description': 'str',
        'subject': 'SubscriptionSubject',
        'notification': 'SubscriptionNotification',
        'expires': 'datetime',
        'status': 'str',
        'throttling': 'int'
    }

    attribute_map = {
        'id': 'id',
        'description': 'description',
        'subject': 'subject',
        'notification': 'notification',
        'expires': 'expires',
        'status': 'status',
        'throttling': 'throttling'
    }

    def __init__(self, id=None, description=None, subject=None, notification=None, expires=None, status=None, throttling=None):  # noqa: E501
        """Subscription - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._description = None
        self._subject = None
        self._notification = None
        self._expires = None
        self._status = None
        self._throttling = None
        self.discriminator = None

        self.id = id
        if description is not None:
            self.description = description
        self.subject = subject
        self.notification = notification
        if expires is not None:
            self.expires = expires
        if status is not None:
            self.status = status
        if throttling is not None:
            self.throttling = throttling

    @property
    def id(self):
        """Gets the id of this Subscription.  # noqa: E501


        :return: The id of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Subscription.


        :param id: The id of this Subscription.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def description(self):
        """Gets the description of this Subscription.  # noqa: E501


        :return: The description of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Subscription.


        :param description: The description of this Subscription.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def subject(self):
        """Gets the subject of this Subscription.  # noqa: E501


        :return: The subject of this Subscription.  # noqa: E501
        :rtype: SubscriptionSubject
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this Subscription.


        :param subject: The subject of this Subscription.  # noqa: E501
        :type: SubscriptionSubject
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")  # noqa: E501

        self._subject = subject

    @property
    def notification(self):
        """Gets the notification of this Subscription.  # noqa: E501


        :return: The notification of this Subscription.  # noqa: E501
        :rtype: SubscriptionNotification
        """
        return self._notification

    @notification.setter
    def notification(self, notification):
        """Sets the notification of this Subscription.


        :param notification: The notification of this Subscription.  # noqa: E501
        :type: SubscriptionNotification
        """
        if notification is None:
            raise ValueError("Invalid value for `notification`, must not be `None`")  # noqa: E501

        self._notification = notification

    @property
    def expires(self):
        """Gets the expires of this Subscription.  # noqa: E501


        :return: The expires of this Subscription.  # noqa: E501
        :rtype: datetime
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this Subscription.


        :param expires: The expires of this Subscription.  # noqa: E501
        :type: datetime
        """

        self._expires = expires

    @property
    def status(self):
        """Gets the status of this Subscription.  # noqa: E501


        :return: The status of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Subscription.


        :param status: The status of this Subscription.  # noqa: E501
        :type: str
        """
        allowed_values = ["active", "inactive"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def throttling(self):
        """Gets the throttling of this Subscription.  # noqa: E501


        :return: The throttling of this Subscription.  # noqa: E501
        :rtype: int
        """
        return self._throttling

    @throttling.setter
    def throttling(self, throttling):
        """Sets the throttling of this Subscription.


        :param throttling: The throttling of this Subscription.  # noqa: E501
        :type: int
        """

        self._throttling = throttling

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Subscription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
