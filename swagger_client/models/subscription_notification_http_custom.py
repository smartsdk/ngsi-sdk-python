# coding: utf-8

"""
    ngsi-v2

    NGSI V2 API RC-2018.04  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SubscriptionNotificationHttpCustom(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'str',
        'method': 'str',
        'qs': 'object',
        'headers': 'object',
        'payload': 'str'
    }

    attribute_map = {
        'url': 'url',
        'method': 'method',
        'qs': 'qs',
        'headers': 'headers',
        'payload': 'payload'
    }

    def __init__(self, url=None, method=None, qs=None, headers=None, payload=None):  # noqa: E501
        """SubscriptionNotificationHttpCustom - a model defined in Swagger"""  # noqa: E501

        self._url = None
        self._method = None
        self._qs = None
        self._headers = None
        self._payload = None
        self.discriminator = None

        if url is not None:
            self.url = url
        if method is not None:
            self.method = method
        if qs is not None:
            self.qs = qs
        if headers is not None:
            self.headers = headers
        if payload is not None:
            self.payload = payload

    @property
    def url(self):
        """Gets the url of this SubscriptionNotificationHttpCustom.  # noqa: E501


        :return: The url of this SubscriptionNotificationHttpCustom.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this SubscriptionNotificationHttpCustom.


        :param url: The url of this SubscriptionNotificationHttpCustom.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def method(self):
        """Gets the method of this SubscriptionNotificationHttpCustom.  # noqa: E501


        :return: The method of this SubscriptionNotificationHttpCustom.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this SubscriptionNotificationHttpCustom.


        :param method: The method of this SubscriptionNotificationHttpCustom.  # noqa: E501
        :type: str
        """
        allowed_values = ["GET", "PUT", "POST", "DELETE", "PATCH", "HEAD", "OPTIONS", "TRACE", "CONNECT"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"  # noqa: E501
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def qs(self):
        """Gets the qs of this SubscriptionNotificationHttpCustom.  # noqa: E501


        :return: The qs of this SubscriptionNotificationHttpCustom.  # noqa: E501
        :rtype: object
        """
        return self._qs

    @qs.setter
    def qs(self, qs):
        """Sets the qs of this SubscriptionNotificationHttpCustom.


        :param qs: The qs of this SubscriptionNotificationHttpCustom.  # noqa: E501
        :type: object
        """

        self._qs = qs

    @property
    def headers(self):
        """Gets the headers of this SubscriptionNotificationHttpCustom.  # noqa: E501


        :return: The headers of this SubscriptionNotificationHttpCustom.  # noqa: E501
        :rtype: object
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this SubscriptionNotificationHttpCustom.


        :param headers: The headers of this SubscriptionNotificationHttpCustom.  # noqa: E501
        :type: object
        """

        self._headers = headers

    @property
    def payload(self):
        """Gets the payload of this SubscriptionNotificationHttpCustom.  # noqa: E501


        :return: The payload of this SubscriptionNotificationHttpCustom.  # noqa: E501
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this SubscriptionNotificationHttpCustom.


        :param payload: The payload of this SubscriptionNotificationHttpCustom.  # noqa: E501
        :type: str
        """

        self._payload = payload

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriptionNotificationHttpCustom):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
