# coding: utf-8

"""
    ngsi-v2

    NGSI V2 API RC-2018.04  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.subscription_notification_http import SubscriptionNotificationHttp  # noqa: F401,E501
from swagger_client.models.subscription_notification_http_custom import SubscriptionNotificationHttpCustom  # noqa: F401,E501


class SubscriptionNotification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attrs': 'str',
        'except_attrs': 'str',
        'http': 'SubscriptionNotificationHttp',
        'http_custom': 'SubscriptionNotificationHttpCustom'
    }

    attribute_map = {
        'attrs': 'attrs',
        'except_attrs': 'exceptAttrs',
        'http': 'http',
        'http_custom': 'httpCustom'
    }

    def __init__(self, attrs=None, except_attrs=None, http=None, http_custom=None):  # noqa: E501
        """SubscriptionNotification - a model defined in Swagger"""  # noqa: E501

        self._attrs = None
        self._except_attrs = None
        self._http = None
        self._http_custom = None
        self.discriminator = None

        if attrs is not None:
            self.attrs = attrs
        if except_attrs is not None:
            self.except_attrs = except_attrs
        if http is not None:
            self.http = http
        if http_custom is not None:
            self.http_custom = http_custom

    @property
    def attrs(self):
        """Gets the attrs of this SubscriptionNotification.  # noqa: E501


        :return: The attrs of this SubscriptionNotification.  # noqa: E501
        :rtype: str
        """
        return self._attrs

    @attrs.setter
    def attrs(self, attrs):
        """Sets the attrs of this SubscriptionNotification.


        :param attrs: The attrs of this SubscriptionNotification.  # noqa: E501
        :type: str
        """

        self._attrs = attrs

    @property
    def except_attrs(self):
        """Gets the except_attrs of this SubscriptionNotification.  # noqa: E501


        :return: The except_attrs of this SubscriptionNotification.  # noqa: E501
        :rtype: str
        """
        return self._except_attrs

    @except_attrs.setter
    def except_attrs(self, except_attrs):
        """Sets the except_attrs of this SubscriptionNotification.


        :param except_attrs: The except_attrs of this SubscriptionNotification.  # noqa: E501
        :type: str
        """

        self._except_attrs = except_attrs

    @property
    def http(self):
        """Gets the http of this SubscriptionNotification.  # noqa: E501


        :return: The http of this SubscriptionNotification.  # noqa: E501
        :rtype: SubscriptionNotificationHttp
        """
        return self._http

    @http.setter
    def http(self, http):
        """Sets the http of this SubscriptionNotification.


        :param http: The http of this SubscriptionNotification.  # noqa: E501
        :type: SubscriptionNotificationHttp
        """

        self._http = http

    @property
    def http_custom(self):
        """Gets the http_custom of this SubscriptionNotification.  # noqa: E501


        :return: The http_custom of this SubscriptionNotification.  # noqa: E501
        :rtype: SubscriptionNotificationHttpCustom
        """
        return self._http_custom

    @http_custom.setter
    def http_custom(self, http_custom):
        """Sets the http_custom of this SubscriptionNotification.


        :param http_custom: The http_custom of this SubscriptionNotification.  # noqa: E501
        :type: SubscriptionNotificationHttpCustom
        """

        self._http_custom = http_custom

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriptionNotification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
