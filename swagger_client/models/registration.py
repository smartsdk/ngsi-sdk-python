# coding: utf-8

"""
    ngsi-v2

    NGSI V2 API RC-2018.04  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.data_provided import DataProvided  # noqa: F401,E501
from swagger_client.models.provider import Provider  # noqa: F401,E501


class Registration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'description': 'str',
        'provider': 'Provider',
        'data_provided': 'DataProvided',
        'expires': 'datetime',
        'status': 'str'
    }

    attribute_map = {
        'id': 'id',
        'description': 'description',
        'provider': 'provider',
        'data_provided': 'dataProvided',
        'expires': 'expires',
        'status': 'status'
    }

    def __init__(self, id=None, description=None, provider=None, data_provided=None, expires=None, status=None):  # noqa: E501
        """Registration - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._description = None
        self._provider = None
        self._data_provided = None
        self._expires = None
        self._status = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if description is not None:
            self.description = description
        if provider is not None:
            self.provider = provider
        if data_provided is not None:
            self.data_provided = data_provided
        if expires is not None:
            self.expires = expires
        if status is not None:
            self.status = status

    @property
    def id(self):
        """Gets the id of this Registration.  # noqa: E501


        :return: The id of this Registration.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Registration.


        :param id: The id of this Registration.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def description(self):
        """Gets the description of this Registration.  # noqa: E501


        :return: The description of this Registration.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Registration.


        :param description: The description of this Registration.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def provider(self):
        """Gets the provider of this Registration.  # noqa: E501


        :return: The provider of this Registration.  # noqa: E501
        :rtype: Provider
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this Registration.


        :param provider: The provider of this Registration.  # noqa: E501
        :type: Provider
        """

        self._provider = provider

    @property
    def data_provided(self):
        """Gets the data_provided of this Registration.  # noqa: E501


        :return: The data_provided of this Registration.  # noqa: E501
        :rtype: DataProvided
        """
        return self._data_provided

    @data_provided.setter
    def data_provided(self, data_provided):
        """Sets the data_provided of this Registration.


        :param data_provided: The data_provided of this Registration.  # noqa: E501
        :type: DataProvided
        """

        self._data_provided = data_provided

    @property
    def expires(self):
        """Gets the expires of this Registration.  # noqa: E501


        :return: The expires of this Registration.  # noqa: E501
        :rtype: datetime
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this Registration.


        :param expires: The expires of this Registration.  # noqa: E501
        :type: datetime
        """

        self._expires = expires

    @property
    def status(self):
        """Gets the status of this Registration.  # noqa: E501


        :return: The status of this Registration.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Registration.


        :param status: The status of this Registration.  # noqa: E501
        :type: str
        """
        allowed_values = ["active", "inactive"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Registration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
